"""Initial Migration

Revision ID: 99c77851b137
Revises: 
Create Date: 2025-03-07 02:22:35.446403

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '99c77851b137'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admin',
    sa.Column('admin_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=100), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('admin_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('categories',
    sa.Column('category_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('category_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('student',
    sa.Column('student_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=100), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('join_date', sa.Date(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('last_login', sa.TIMESTAMP(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('student_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('courses',
    sa.Column('course_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['admin.admin_id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['categories.category_id'], ),
    sa.PrimaryKeyConstraint('course_id')
    )
    op.create_table('certificates',
    sa.Column('certificate_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=True),
    sa.Column('course_id', sa.Integer(), nullable=True),
    sa.Column('certificate_number', sa.String(length=100), nullable=False),
    sa.Column('issued_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('is_valid', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.course_id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['student.student_id'], ),
    sa.PrimaryKeyConstraint('certificate_id'),
    sa.UniqueConstraint('certificate_number')
    )
    op.create_table('enrollments',
    sa.Column('enrollment_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=True),
    sa.Column('course_id', sa.Integer(), nullable=True),
    sa.Column('enrolled_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('progress', sa.Float(), nullable=True),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('certificate_issued', sa.Boolean(), nullable=True),
    sa.CheckConstraint('progress >= 0 AND progress <= 100', name='check_progress_range'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.course_id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['student.student_id'], ),
    sa.PrimaryKeyConstraint('enrollment_id')
    )
    op.create_table('forum_topics',
    sa.Column('topic_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=True),
    sa.Column('student_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('is_pinned', sa.Boolean(), nullable=True),
    sa.Column('is_closed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.course_id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['student.student_id'], ),
    sa.PrimaryKeyConstraint('topic_id')
    )
    op.create_table('materials',
    sa.Column('material_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('enum', sa.Enum('pdf', 'video', 'slides', 'text', name='material_type'), nullable=True),
    sa.Column('upload_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['admin.admin_id'], ),
    sa.ForeignKeyConstraint(['course_id'], ['courses.course_id'], ),
    sa.PrimaryKeyConstraint('material_id')
    )
    op.create_table('tests',
    sa.Column('test_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('pass_percentage', sa.Integer(), nullable=False),
    sa.Column('time_limit', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['admin.admin_id'], ),
    sa.ForeignKeyConstraint(['course_id'], ['courses.course_id'], ),
    sa.PrimaryKeyConstraint('test_id')
    )
    op.create_table('forum_replies',
    sa.Column('reply_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('topic_id', sa.Integer(), nullable=True),
    sa.Column('student_id', sa.Integer(), nullable=True),
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('upvotes', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['admin.admin_id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['student.student_id'], ),
    sa.ForeignKeyConstraint(['topic_id'], ['forum_topics.topic_id'], ),
    sa.PrimaryKeyConstraint('reply_id')
    )
    op.create_table('questions',
    sa.Column('question_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('test_id', sa.Integer(), nullable=True),
    sa.Column('question_text', sa.Text(), nullable=False),
    sa.Column('question_type', sa.Enum('multiple_choice', 'true_false', 'essay', name='question_type'), nullable=True),
    sa.Column('points', sa.Integer(), nullable=True),
    sa.Column('sequence', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['test_id'], ['tests.test_id'], ),
    sa.PrimaryKeyConstraint('question_id')
    )
    op.create_table('test_attempts',
    sa.Column('attempt_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=True),
    sa.Column('test_id', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('completed_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('passed', sa.Boolean(), nullable=True),
    sa.Column('total_time', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['student.student_id'], ),
    sa.ForeignKeyConstraint(['test_id'], ['tests.test_id'], ),
    sa.PrimaryKeyConstraint('attempt_id')
    )
    op.create_table('answers',
    sa.Column('answer_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.Column('answer_text', sa.Text(), nullable=False),
    sa.Column('is_correct', sa.Boolean(), nullable=False),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.question_id'], ),
    sa.PrimaryKeyConstraint('answer_id')
    )
    op.create_table('student_answers',
    sa.Column('student_answer_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('attempt_id', sa.Integer(), nullable=True),
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.Column('answer_id', sa.Integer(), nullable=True),
    sa.Column('essay_answer', sa.Text(), nullable=True),
    sa.Column('point_awarded', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['answer_id'], ['answers.answer_id'], ),
    sa.ForeignKeyConstraint(['attempt_id'], ['test_attempts.attempt_id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['questions.question_id'], ),
    sa.PrimaryKeyConstraint('student_answer_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('student_answers')
    op.drop_table('answers')
    op.drop_table('test_attempts')
    op.drop_table('questions')
    op.drop_table('forum_replies')
    op.drop_table('tests')
    op.drop_table('materials')
    op.drop_table('forum_topics')
    op.drop_table('enrollments')
    op.drop_table('certificates')
    op.drop_table('courses')
    op.drop_table('student')
    op.drop_table('categories')
    op.drop_table('admin')
    # ### end Alembic commands ###
